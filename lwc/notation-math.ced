'/bootstrap':signature(sum(Var,Start,End,Expr)::'/imperative':expr('/bootstrap':number),[Var::'/imperative':variable('/bootstrap':number),Start::'/imperative':expr('/bootstrap':number),End::'/imperative':expr('/bootstrap':number),Expr::'/imperative':expr('/bootstrap':number)]).
'/bootstrap':projection(sum(Var,Start,End,Expr)::'/imperative':expr('/bootstrap':number),'/bootstrap':vert(['/bootstrap':halfSize('/bootstrap':vis(End::'/imperative':expr('/bootstrap':number))),'/bootstrap':pivot('/bootstrap':horiz(['/bootstrap':brackets('/bootstrap':vis(Expr::'/imperative':expr('/bootstrap':number)),931,0)])),'/bootstrap':halfSize('/bootstrap':horiz(['/bootstrap':vis(Var::'/imperative':variable('/bootstrap':number)),'/bootstrap':label(! (=)),'/bootstrap':vis(Start::'/imperative':expr('/bootstrap':number))]))])).
'/util':behavior(sum(Var,Start,End,Expr)::'/imperative':expr('/bootstrap':number),!'evaluates to Expr when Var=Start if Start==End', ('/imperative':initialState(Sigma),'/imperative':eval(sum(X,'/imperative':const(1),'/imperative':const(1),'/imperative':var(X)),Sigma,'/bootstrap':number,One),'/util':assertEqual(One,1,'/bootstrap':number))).
'/util':behavior(sum(Var,Start,End,Expr)::'/imperative':expr('/bootstrap':number),!'evaluates to the sum of Expr for Var values from Start to End', ('/imperative':initialState(Sigma),'/imperative':eval(sum(X,'/imperative':const(1),'/imperative':const(3),'/imperative':var(X)),Sigma,'/bootstrap':number,Six),'/util':assertEqual(Six,6,'/bootstrap':number))).
annotation:shrink(('/imperative':eval(sum(Var,Start,End,Expr),Sigma,'/bootstrap':number,Res):-'/imperative':eval(Start,Sigma,'/bootstrap':number,StartIndex),'/imperative':eval(End,Sigma,'/bootstrap':number,EndIndex),sum(StartIndex,EndIndex,Var,Expr,Res,Sigma))).
'/bootstrap':signature(sum(StartIndex,EndIndex,Var,Expr,Res,Sigma)::'/bootstrap':pred,[StartIndex::'/bootstrap':number,EndIndex::'/bootstrap':number,Var::'/imperative':variable('/bootstrap':number),Expr::'/imperative':expr('/bootstrap':number),Res::'/bootstrap':number,Sigma::'/imperative':state]).
'/bootstrap':projection(sum(StartIndex,EndIndex,Var,Expr,Res,Sigma)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':label(!'the sum of'),'/bootstrap':vis(Expr::'/imperative':expr('/bootstrap':number)),'/bootstrap':label(!where),'/bootstrap':vis(Var::'/imperative':variable('/bootstrap':number)),'/bootstrap':label(!'ranges from'),'/bootstrap':vis(StartIndex::'/bootstrap':number),'/bootstrap':label(!to),'/bootstrap':vis(EndIndex::'/bootstrap':number),'/bootstrap':label(! (is)),'/bootstrap':vis(Res::'/bootstrap':number),'/bootstrap':label(!'in state'),'/bootstrap':vis(Sigma::'/imperative':state)])).
annotation:shrink((sum(Start,End,Var,Expr,Res,Sigma):-builtin:if(Start::'/bootstrap':number=End::'/bootstrap':number, ('/imperative':changeState(Sigma,Var,End,'/bootstrap':number,SigmaPrime),'/imperative':eval(Expr,SigmaPrime,'/bootstrap':number,Res)), ('/imperative':changeState(Sigma,Var,Start,'/bootstrap':number,SigmaPrime),'/imperative':eval(Expr,SigmaPrime,'/bootstrap':number,First),builtin:succ(Start,StartPrime),sum(StartPrime,End,Var,Expr,ResPrime,Sigma),'/Functional':eval('/Functional':applyBinOp('/Functional':const(ResPrime),'/Functional':numPlus,'/Functional':const(First)),'/bootstrap':number,Res))))).
'/bootstrap':signature(div(A,B)::'/imperative':expr('/bootstrap':number),[A::'/imperative':expr('/bootstrap':number),B::'/imperative':expr('/bootstrap':number)]).
'/bootstrap':projection(div(A,B)::'/imperative':expr('/bootstrap':number),'/bootstrap':vert(['/bootstrap':vis(A::'/imperative':expr('/bootstrap':number)),'/bootstrap':pivot('/bootstrap':box(1)),'/bootstrap':vis(B::'/imperative':expr('/bootstrap':number))])).
'/util':behavior(div(A,B)::'/imperative':expr('/bootstrap':number),!'should evaluate to A/B', ('/imperative':initialState(Sigma),'/imperative':eval(div('/imperative':const(1),'/imperative':const(2)),Sigma,'/bootstrap':number,Half),'/util':assertEqual(Half,0.5,'/bootstrap':number))).
'/imperative':eval(div(A,B),Sigma,'/bootstrap':number,Res):-'/imperative':eval('/imperative':op(A,'/Functional':divBy,B),Sigma,'/bootstrap':number,Res).
'/bootstrap':unitTest(('/imperative':execute('/imperative':print(sum(I,'/imperative':const(1),'/imperative':const(1000),div('/imperative':const(1),'/imperative':op('/imperative':var(I),'/Functional':times,'/imperative':var(I)))),'/bootstrap':number),[],[Result::'/bootstrap':number]),'/Functional':gt('/Functional':const(Result),'/Functional':const(1.64),'/bootstrap':number),'/Functional':gt('/Functional':const(1.65),'/Functional':const(Result),'/bootstrap':number))).
